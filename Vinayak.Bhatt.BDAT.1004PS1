{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "604c3724",
   "metadata": {},
   "source": [
    "Q1. What data type is each of the following?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "288862f1",
   "metadata": {},
   "source": [
    "5 ---> Int\n",
    "\n",
    "5.0 ---> Double \n",
    "\n",
    "5 > 1---> Boolean\n",
    "\n",
    "'5' ---> Character\n",
    "\n",
    "5 * 2 ---> Int \n",
    "\n",
    "'5' * 2 ---> Int \n",
    "\n",
    "'5' + '2'---> String \n",
    "\n",
    "5/2 ---> Int \n",
    "\n",
    "5% 2 ---> Float \n",
    "\n",
    "{5, 2, 1} ---> Array\n",
    "\n",
    "5 == 3 ---> Boolean\n",
    "\n",
    "Pi (the number) ---> Double"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a65282eb",
   "metadata": {},
   "source": [
    "Q6. Write a function pig() that takes a word (i.e., a string) as input and returns its pig Latin form. Your function should still work if the input word contains upper case characters. Your output should always be lower case however."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "18b50035",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "appyhay\n",
      "enterway\n"
     ]
    }
   ],
   "source": [
    "def pig(word):\n",
    "\n",
    "    word= str.lower(word); \n",
    "    vowel= \"aeiou\"\n",
    "\n",
    "    if (word[0] in vowel): \n",
    "        word = word + \"way\"\n",
    "\n",
    "    else:\n",
    "        temp = word[0] \n",
    "        word = word[1:]\n",
    "        word = word + temp + \"ay\"\n",
    "    print(word);\n",
    "\n",
    "pig(\"happy\") \n",
    "pig(\"Enter\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45f7ecdf",
   "metadata": {},
   "source": [
    "Q7. File bloodtype.txt records blood-types of patients (A, B, AB, O or OO) at a clinic. Write a function bldcount() that reads the file with name name and reports (i.c... prints) how many patients there are in each bloodtype."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "642f6021",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are  15 patients of blood type A\n",
      "There are  13 patients of blood type AB\n",
      "There are  1 patients of blood type B\n",
      "There are  15 patients of blood type O\n",
      "There are  0 patients of blood type OO\n"
     ]
    }
   ],
   "source": [
    "file = open(\"bloodtype.txt\",\"r\")\n",
    "\n",
    "bt = file.read().split(\" \")\n",
    "\n",
    "a = 0\n",
    "ab = 0\n",
    "b = 0\n",
    "o = 0\n",
    "oo = 0\n",
    "\n",
    "for bloodgroup in bt:\n",
    "    if bloodgroup == \"A\":\n",
    "        a += 1\n",
    "    elif bloodgroup == \"AB\":\n",
    "        ab += 1\n",
    "    elif bloodgroup == \"B\":\n",
    "        b += 1\n",
    "    elif bloodgroup == \"O\":\n",
    "        o += 1\n",
    "    elif bloodgroup == \"OO\":\n",
    "        OO += 1\n",
    "    elif bloodgroup == \"\\n\":\n",
    "        break\n",
    "        \n",
    "\n",
    "\n",
    "print(\"There are \", a, \"patients of blood type A\" )\n",
    "print(\"There are \", ab, \"patients of blood type AB\" )\n",
    "print(\"There are \", b, \"patients of blood type B\" )\n",
    "print(\"There are \", o, \"patients of blood type O\" )\n",
    "print(\"There are \", oo, \"patients of blood type OO\" )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3719f14a",
   "metadata": {},
   "source": [
    "Q8. Write a fuction curconv() that takes as input:\n",
    "       1. A currency represented using a string(e.g., 'JPY for the Japanese Yen or 'EUR' for the Euro)\n",
    "       2. An amount and then converts and returns the amount in US Dollars."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bbbc2d32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "122.96544\n",
      "1.241401\n"
     ]
    }
   ],
   "source": [
    "def curconv(currency,amount):\n",
    "    file = open(\"currencies.txt\", \"r\") \n",
    "    fileRead = file.readlines()\n",
    "    file.close()\n",
    "    for file in fileRead:\n",
    "        cur = file.split() \n",
    "        if currency == cur[0]: \n",
    "            rate = float(cur[1]) \n",
    "            currency = amount * rate\n",
    "\n",
    "    print(currency)\n",
    "\n",
    "curconv('EUR',100)\n",
    "curconv('JPY' ,100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eee55be4",
   "metadata": {},
   "source": [
    "Q9. Each of the following will cause an exception (an error). Identify what type of exception each will cause."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0254e27",
   "metadata": {},
   "source": [
    "Trying to add incompatible variables, as in adding 6 + 'a' - TypeError\n",
    "\n",
    "Referring to the 12th item of a list that has only 10 items - IndexError\n",
    "\n",
    "Using a value that is out of range for a function's input, such as calling math.sqrt(-1.0) - ValueError\n",
    "\n",
    "Using an undeclared variable, such as print(x) when x has not been defined - NameError\n",
    "\n",
    "Trying to open a file that does not exist, such as mistyping the file name or looking in the wrong directory - FileNotFoundError"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a638718b",
   "metadata": {},
   "source": [
    "Q10. Assume that the string letters is already defined as 'abcdefghijklmnopqrstuvwxyz'. Write a function called frequencies () that takes a string as its only parameter, and returns a list of integers, showing the number of times each character appears in the text. Your function may ignore any characters that are not in letters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "781c3a27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 0, 1, 2, 4, 0, 0, 0, 1, 0, 0, 1, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0]\n",
      "[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "def frequencies(acd):\n",
    "\n",
    "    alphabets = \"abcdefghijklmnopqrstuvwxyz\" \n",
    "    \n",
    "    abcd = [0] * 26\n",
    "\n",
    "    acd = acd.lower()\n",
    "\n",
    "    for i in range(len(acd)): \n",
    "        for j in range(len(alphabets)):\n",
    "            if(acd[i] == alphabets[j]): \n",
    "                abcd[j]= abcd[j] + 1\n",
    "            j = j + 1\n",
    "        i = i + 1\n",
    "    print(abcd)\n",
    "\n",
    "frequencies (\"Newton discovered apple\")\n",
    "frequencies(\"apple\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
